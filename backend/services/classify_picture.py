# -*- coding: utf-8 -*-
"""나무톤최종.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MKykvM2jYDswBVvcgUkJYqDHBfxa1x1L
"""

# Import all the libraries
import os
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,ConfusionMatrixDisplay,classification_report
from tensorflow.keras.models import load_model

from services.process_img import img_to_np_array


async def classify_image(file_np):
    # Load the model
    model = load_model('./data/model2.h5')

    # Ensure that file_np is a numpy array with the correct shape expected by the model
    # For instance, if your model expects a 4D array (including the batch size),
    # reshape the file_np accordingly. Here, I'm assuming the model expects
    # a single sample with 3 dimensions (height, width, channels).
    # Adjust the reshape method according to your model's requirements.
    file_np_reshaped = file_np.reshape((1,) + file_np.shape)
    
    # Predict
    predictions = model.predict(file_np_reshaped)
    # print(predictions)
    prediction = np.argmax(predictions)
    
    return prediction

# # 테스트 이미지 데이터 불러오기
# test_X = np.load('/content/drive/MyDrive/나무톤/test_X.npy')
# test_X = np.transpose(test_X, (0, 2, 1, 3))

# # 모델 불러오기 및 예측
# model = load_model('/data/model2.h5')
# predictions = model.predict(test_X)

# # 예측 확률에 대한 임계값 설정
# threshold = 0.5

# # 예측된 레이블 추출
# predicted_labels = []
# for prediction in predictions:
#     # 가장 높은 확률 추출
#     max_prob = np.max(prediction)

#     # 임계값보다 낮은 경우 'None' 할당
#     if max_prob < threshold:
#         predicted_labels.append(None)
#     else:
#         # 가장 높은 확률의 인덱스(레이블) 추출
#         predicted_label = np.argmax(prediction)
#         predicted_labels.append(predicted_label)

# print(file_names)
# print(len(predicted_labels))
# # 결과를 DataFrame으로 생성 (이미지 이름을 인덱스로 사용)
# result = pd.DataFrame({"Image_Name": file_names, "Label": predicted_labels})

# # 결과를 CSV 파일로 저장
# result.to_csv("/content/drive/MyDrive/나무톤/result2.csv", index=False)